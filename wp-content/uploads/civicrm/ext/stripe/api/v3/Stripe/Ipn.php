<?php
/*
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC. All rights reserved.                        |
 |                                                                    |
 | This work is published under the GNU AGPLv3 license with some      |
 | permitted exceptions and without any warranty. For full license    |
 | and copyright information, see https://civicrm.org/licensing       |
 +--------------------------------------------------------------------+
 */

use CRM_Stripe_ExtensionUtil as E;

/**
 * This api allows you to replay Stripe events.
 *
 * You can either pass the id of an entry in the System Log (which can
 * be populated with the Stripe.PopulateLog call) or you can pass a
 * event id from Stripe directly.
 *
 * When processing an event, the event will always be re-fetched from the
 * Stripe server first, so this will not work while offline or with
 * events that were not generated by the Stripe server.
 */

/**
 * Stripe.Ipn API specification
 *
 * @param array $spec description of fields supported by this API call
 */
function _civicrm_api3_stripe_Ipn_spec(&$spec) {
  $spec['id']['title'] = E::ts('CiviCRM System Log id to replay from system log.');
  $spec['evtid']['title'] = E::ts('An event id as generated by Stripe.');
  $spec['ppid']['title'] = E::ts('The payment processor to use (required if using evtid)');
  $spec['suppressreceipt']['title'] = E::ts('Set to 1 to override contribution page settings and do not send a receipt (default is to use contribution page settings). )');
  $spec['suppressreceipt']['api.default'] = 0;
  $spec['suppressreceipt']['type'] = CRM_Utils_Type::T_INT;
}

/**
 * Stripe.Ipn API
 *
 * @param array $params
 *
 * @return array
 * @throws \API_Exception
 * @throws \CiviCRM_API3_Exception
 */
function civicrm_api3_stripe_Ipn($params) {
  $stripeObject = NULL;
  $paymentProcessorID = NULL;

  /** @var \CRM_Core_Payment_Stripe $paymentProcessor */
  if (array_key_exists('id', $params)) {
    // Read from civicrm SystemLog
    $data = civicrm_api3('SystemLog', 'getsingle', ['id' => $params['id'], 'return' => ['message', 'context']]);
    if (empty($data)) {
      throw new API_Exception('Failed to find that entry in the system log', 3234);
    }
    $stripeObject = json_decode($data['context']);
    if (preg_match('/processor_id=([0-9]+)$/', $data['message'], $matches)) {
      $paymentProcessorID = $matches[1];
      $paymentProcessor = \Civi\Payment\System::singleton()->getById($paymentProcessorID);
    }
    else {
      throw new API_Exception('Failed to find payment processor id in system log', 3235);
    }
  }
  elseif (array_key_exists('evtid', $params)) {
    // Read directly from Stripe using event_id
    if (!array_key_exists('ppid', $params)) {
      throw new API_Exception('Please pass the payment processor id (ppid) if using evtid.', 3236);
    }
    $paymentProcessorID = $params['ppid'];
    $paymentProcessor = \Civi\Payment\System::singleton()->getById($paymentProcessorID);
    $stripeObject = $paymentProcessor->stripeClient->events->retrieve($params['evtid']);
  }
  else {
    throw new API_Exception('Missing parameters. You must specify id or evtid', 3237);
  }

  // By default, set emailReceipt to NULL so the default receipt setting
  // will kick in.
  $emailReceipt = NULL;
  if ($params['suppressreceipt'] == 1) {
    // Override, do not send receipt.
    $emailReceipt = 0;
  }

  try {
    $processPaymentNotificationResult = $paymentProcessor::processPaymentNotification(
      $paymentProcessorID,
      json_encode($stripeObject),
      FALSE,
      $emailReceipt);
  } catch (Throwable $e) {
    return civicrm_api3_create_error($e->getMessage());
  }

  return civicrm_api3_create_success($processPaymentNotificationResult, $params);
}
